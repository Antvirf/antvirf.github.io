'''
Create a projects.md file based on GitHub repositories
'''

import json

import requests

PROJECTS_BASE_TEMPLATE = """+++
title = "Projects"
slug = "projects"
+++

*Autogenerated based on GitHub repositories. Sorted by creation date.*

"""


class Markdown_entry:
    def __init__(self, date) -> None:
        self.content = ""
        self.date = date

    def add_line(self, line):
        self.content += line + "\n\n"
        return self

    def add_verbose_line(self, line, continue_previous_line=False):
        while continue_previous_line:
            if self.content[-1] == "\n":
                self.content = self.content[:-1]
            else:
                self.content += " "  # Add a space to separate
                break

        if line[-1] != '.':
            line += "."
        self.content += line + "\n\n"
        return self

    def get_md(self):
        return self.content


def convert_list_of_projects_to_markdown_entry(api_response):
    base = PROJECTS_BASE_TEMPLATE
    markdown_entries = []

    for project in api_response:
        markdown_entries.append(
            convert_project_response_to_markdown_entry(project)
        )

    markdown_entries = sorted(
        markdown_entries,
        key=lambda md: md.date,
        reverse=True
    )

    for entry in markdown_entries:
        base += entry.get_md()

    return base


def convert_project_response_to_markdown_entry(project):
    '''Takes a project entry from the GitHub API response and returns a markdown_entry entry.'''
    markdown_entry = Markdown_entry(
        date=project['created_at'][:10]
    )

    # title with link
    markdown_entry.add_line(
        f"## [{project['name']}]({project['html_url']}) ({project['created_at'][:10]})"
    )

    # description
    markdown_entry.add_verbose_line(
        project["description"]
    )

    # language
    if project['language'] is not None:
        markdown_entry.add_verbose_line(
            f"Built with **{project['language']}**",
            continue_previous_line=True
        )

    # Created/updated at
    # markdown_entry.add_verbose_line(
    #     f"Created at {project['created_at']}, last update at {project['pushed_at']}"
    # )

    return markdown_entry


def make_projects_md(github_user):
    '''Create a projects.md file based on a user's (public) GitHub repositories'''

    if True:
        query_url = f"https://api.github.com/users/{github_user}/repos?per_page=100"
        repo_info = requests.get(query_url).json()
    else:
        with open('t.json', 'r') as json_data:
            repo_info = json.load(json_data)

    md_content = convert_list_of_projects_to_markdown_entry(repo_info)

    with open('./content/projects.md', 'w') as projects_md:
        projects_md.write(md_content)
    print("./content/projects.md created")


if __name__ == "__main__":
    make_projects_md("Antvirf")
